//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""CameraControls"",
            ""id"": ""d82bf2e8-ae35-4849-8c7c-00e527a27bbb"",
            ""actions"": [
                {
                    ""name"": ""Camera Thumbstick"",
                    ""type"": ""Value"",
                    ""id"": ""efef3ced-bf4f-4996-bbf2-1156f77bf46e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera Mouse Input"",
                    ""type"": ""Button"",
                    ""id"": ""a64bd264-79ba-411d-882b-ae1cb1a8934e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e72ee119-5d9c-47ad-80d0-ebfa716e736b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Thumbstick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4832785-0d42-432d-aed0-a89ce1f0b5de"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Mouse Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interact"",
            ""id"": ""83a4b3ac-9e3a-4c63-92cf-d56a259c5916"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c2efffee-0f04-4e0b-a56e-c09d78e87866"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Past"",
                    ""type"": ""Button"",
                    ""id"": ""895193d5-c338-43b9-9f7b-a29868db91e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Present"",
                    ""type"": ""Button"",
                    ""id"": ""33d3daad-1e9a-4cb4-a316-8a15e096f503"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Future"",
                    ""type"": ""Button"",
                    ""id"": ""fe2addf2-b5e1-4c36-b881-eac78eb128be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dd373f41-97ca-4601-b434-6f1d719f0525"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e66fafcb-156a-4491-9e9f-5561ba8ddb86"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25fb4524-8c45-48b8-ac36-23aceb53163a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Past"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dba7c7f8-50b5-4162-93c3-d73213d11598"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Past"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a61b367-c5f8-4c05-bf8f-83a56eaa79b5"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Present"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a8b0ec8-2ec4-4f08-b843-38f88de375cd"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Present"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83744b12-09c1-47aa-bc9d-d3252ea63ae5"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Future"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f8ea3cb-8088-442b-80f5-1dc640b7d3ec"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Future"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterMovement"",
            ""id"": ""4bf87acb-47c0-458d-a0e0-ba35bfdef775"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""09a96adc-a2dd-483f-b1b5-66c9e357df9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""34d0abd8-a107-4419-9c44-f1436262209e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""82148c94-b792-44f9-9567-f9e23bb04837"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""282c303a-7c64-4c0d-b5fe-4991359fe69f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD Keyboard"",
                    ""id"": ""b22fab51-08e7-4c8b-9830-deb395899180"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2adca8e6-418d-4b7e-803f-d1987115fb29"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""406c3b35-0728-4b01-af5e-dd121beef40a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0d636609-5617-4fc4-87b0-c7dbff9e7561"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""301ac686-e695-4915-a3e1-8de6e7a976fa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""bc4e9cbf-a142-4047-aef3-625a988fb2bb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""374d3d1b-54e6-4280-b978-6134b4e1ccbf"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2fa3a35e-4766-4c78-98ae-631afc95a09b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""90506c12-f7fb-4e24-86de-4b4edecf7170"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""129b7339-2f8f-4fbf-934d-7931353f242d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c903f595-4d48-49a0-9641-4b0dd7e00691"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BoxMovement"",
            ""id"": ""2e08cb11-5f6e-4285-ac31-89cc6774cf6d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""57d5937c-e305-4a9f-8fc2-eca903501b16"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD Keyboard"",
                    ""id"": ""fd3371d2-f2c9-4a0f-bb34-a074695d4525"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""753cd3e5-79f0-4abb-951c-100d610a70bf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5812460b-c1fb-43ee-9262-e41fabef7aa2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""32a80ae8-b291-4711-88bc-4fbf133ef7fc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""328d6b1e-c569-4414-ad03-eb57da5580e5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""709f9df8-2b6d-4a91-9d15-d9530421c2c7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""22002ecb-219e-417e-a6c7-39c70f126a72"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9c0814b6-e46c-407a-b7f8-428a60eecd08"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8cbd928f-d494-469c-a1f8-d839eea3f14a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c354a10a-35bb-4616-a5c9-4d883c73b783"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d8c2c38-6edf-4ee7-ac0d-6dc8afbbfacd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuInterraction"",
            ""id"": ""fd457262-b1d7-47cb-af93-d269b2deb86d"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Pause"",
            ""id"": ""dec40c5d-0603-45b0-9ee0-05edab18233a"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""9f09f049-9a69-4e16-bc62-c045805996e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26e6b17d-c9ce-499b-8e50-353e0ecef7a0"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c8c4f24-42cd-48bb-8f7b-44c1eb098a29"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Onboarding"",
            ""id"": ""60844a0f-68df-488f-8c42-c5f34a7ec646"",
            ""actions"": [
                {
                    ""name"": ""DRight"",
                    ""type"": ""Button"",
                    ""id"": ""92305ec1-51bb-4034-a842-a807e82a31a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e3ba9e78-99be-4e07-83af-4561264003a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eefcddaa-4f36-45c6-9149-092a1e65108d"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08c66380-fe30-4b5f-899f-23dd6bf35329"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LevelSelect"",
            ""id"": ""ebd2275d-f8b9-47a6-bbaa-1b2958161091"",
            ""actions"": [
                {
                    ""name"": ""EnableMenu"",
                    ""type"": ""Button"",
                    ""id"": ""b344ebbb-5e73-4b8f-88c2-7d02334869e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6da579e4-6abf-41a1-a3ae-9d1d9502919d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a75e954b-5b9d-4fc5-a8bf-9c744584a23f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraControls
        m_CameraControls = asset.FindActionMap("CameraControls", throwIfNotFound: true);
        m_CameraControls_CameraThumbstick = m_CameraControls.FindAction("Camera Thumbstick", throwIfNotFound: true);
        m_CameraControls_CameraMouseInput = m_CameraControls.FindAction("Camera Mouse Input", throwIfNotFound: true);
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_Interact = m_Interact.FindAction("Interact", throwIfNotFound: true);
        m_Interact_Past = m_Interact.FindAction("Past", throwIfNotFound: true);
        m_Interact_Present = m_Interact.FindAction("Present", throwIfNotFound: true);
        m_Interact_Future = m_Interact.FindAction("Future", throwIfNotFound: true);
        // CharacterMovement
        m_CharacterMovement = asset.FindActionMap("CharacterMovement", throwIfNotFound: true);
        m_CharacterMovement_Jump = m_CharacterMovement.FindAction("Jump", throwIfNotFound: true);
        m_CharacterMovement_Movement = m_CharacterMovement.FindAction("Movement", throwIfNotFound: true);
        // BoxMovement
        m_BoxMovement = asset.FindActionMap("BoxMovement", throwIfNotFound: true);
        m_BoxMovement_Movement = m_BoxMovement.FindAction("Movement", throwIfNotFound: true);
        // MenuInterraction
        m_MenuInterraction = asset.FindActionMap("MenuInterraction", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Pause = m_Pause.FindAction("Pause", throwIfNotFound: true);
        // Onboarding
        m_Onboarding = asset.FindActionMap("Onboarding", throwIfNotFound: true);
        m_Onboarding_DRight = m_Onboarding.FindAction("DRight", throwIfNotFound: true);
        m_Onboarding_DLeft = m_Onboarding.FindAction("DLeft", throwIfNotFound: true);
        // LevelSelect
        m_LevelSelect = asset.FindActionMap("LevelSelect", throwIfNotFound: true);
        m_LevelSelect_EnableMenu = m_LevelSelect.FindAction("EnableMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraControls
    private readonly InputActionMap m_CameraControls;
    private ICameraControlsActions m_CameraControlsActionsCallbackInterface;
    private readonly InputAction m_CameraControls_CameraThumbstick;
    private readonly InputAction m_CameraControls_CameraMouseInput;
    public struct CameraControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public CameraControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraThumbstick => m_Wrapper.m_CameraControls_CameraThumbstick;
        public InputAction @CameraMouseInput => m_Wrapper.m_CameraControls_CameraMouseInput;
        public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICameraControlsActions instance)
        {
            if (m_Wrapper.m_CameraControlsActionsCallbackInterface != null)
            {
                @CameraThumbstick.started -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnCameraThumbstick;
                @CameraThumbstick.performed -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnCameraThumbstick;
                @CameraThumbstick.canceled -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnCameraThumbstick;
                @CameraMouseInput.started -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnCameraMouseInput;
                @CameraMouseInput.performed -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnCameraMouseInput;
                @CameraMouseInput.canceled -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnCameraMouseInput;
            }
            m_Wrapper.m_CameraControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraThumbstick.started += instance.OnCameraThumbstick;
                @CameraThumbstick.performed += instance.OnCameraThumbstick;
                @CameraThumbstick.canceled += instance.OnCameraThumbstick;
                @CameraMouseInput.started += instance.OnCameraMouseInput;
                @CameraMouseInput.performed += instance.OnCameraMouseInput;
                @CameraMouseInput.canceled += instance.OnCameraMouseInput;
            }
        }
    }
    public CameraControlsActions @CameraControls => new CameraControlsActions(this);

    // Interact
    private readonly InputActionMap m_Interact;
    private IInteractActions m_InteractActionsCallbackInterface;
    private readonly InputAction m_Interact_Interact;
    private readonly InputAction m_Interact_Past;
    private readonly InputAction m_Interact_Present;
    private readonly InputAction m_Interact_Future;
    public struct InteractActions
    {
        private @PlayerInputActions m_Wrapper;
        public InteractActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Interact_Interact;
        public InputAction @Past => m_Wrapper.m_Interact_Past;
        public InputAction @Present => m_Wrapper.m_Interact_Present;
        public InputAction @Future => m_Wrapper.m_Interact_Future;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void SetCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnInteract;
                @Past.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnPast;
                @Past.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnPast;
                @Past.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnPast;
                @Present.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnPresent;
                @Present.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnPresent;
                @Present.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnPresent;
                @Future.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnFuture;
                @Future.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnFuture;
                @Future.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnFuture;
            }
            m_Wrapper.m_InteractActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Past.started += instance.OnPast;
                @Past.performed += instance.OnPast;
                @Past.canceled += instance.OnPast;
                @Present.started += instance.OnPresent;
                @Present.performed += instance.OnPresent;
                @Present.canceled += instance.OnPresent;
                @Future.started += instance.OnFuture;
                @Future.performed += instance.OnFuture;
                @Future.canceled += instance.OnFuture;
            }
        }
    }
    public InteractActions @Interact => new InteractActions(this);

    // CharacterMovement
    private readonly InputActionMap m_CharacterMovement;
    private ICharacterMovementActions m_CharacterMovementActionsCallbackInterface;
    private readonly InputAction m_CharacterMovement_Jump;
    private readonly InputAction m_CharacterMovement_Movement;
    public struct CharacterMovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public CharacterMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_CharacterMovement_Jump;
        public InputAction @Movement => m_Wrapper.m_CharacterMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_CharacterMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterMovementActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterMovementActions instance)
        {
            if (m_Wrapper.m_CharacterMovementActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_CharacterMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterMovementActionsCallbackInterface.OnJump;
                @Movement.started -= m_Wrapper.m_CharacterMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharacterMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharacterMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_CharacterMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public CharacterMovementActions @CharacterMovement => new CharacterMovementActions(this);

    // BoxMovement
    private readonly InputActionMap m_BoxMovement;
    private IBoxMovementActions m_BoxMovementActionsCallbackInterface;
    private readonly InputAction m_BoxMovement_Movement;
    public struct BoxMovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public BoxMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_BoxMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_BoxMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoxMovementActions set) { return set.Get(); }
        public void SetCallbacks(IBoxMovementActions instance)
        {
            if (m_Wrapper.m_BoxMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_BoxMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_BoxMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_BoxMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_BoxMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public BoxMovementActions @BoxMovement => new BoxMovementActions(this);

    // MenuInterraction
    private readonly InputActionMap m_MenuInterraction;
    private IMenuInterractionActions m_MenuInterractionActionsCallbackInterface;
    public struct MenuInterractionActions
    {
        private @PlayerInputActions m_Wrapper;
        public MenuInterractionActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_MenuInterraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuInterractionActions set) { return set.Get(); }
        public void SetCallbacks(IMenuInterractionActions instance)
        {
            if (m_Wrapper.m_MenuInterractionActionsCallbackInterface != null)
            {
            }
            m_Wrapper.m_MenuInterractionActionsCallbackInterface = instance;
            if (instance != null)
            {
            }
        }
    }
    public MenuInterractionActions @MenuInterraction => new MenuInterractionActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private IPauseActions m_PauseActionsCallbackInterface;
    private readonly InputAction m_Pause_Pause;
    public struct PauseActions
    {
        private @PlayerInputActions m_Wrapper;
        public PauseActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Pause_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void SetCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PauseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // Onboarding
    private readonly InputActionMap m_Onboarding;
    private IOnboardingActions m_OnboardingActionsCallbackInterface;
    private readonly InputAction m_Onboarding_DRight;
    private readonly InputAction m_Onboarding_DLeft;
    public struct OnboardingActions
    {
        private @PlayerInputActions m_Wrapper;
        public OnboardingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DRight => m_Wrapper.m_Onboarding_DRight;
        public InputAction @DLeft => m_Wrapper.m_Onboarding_DLeft;
        public InputActionMap Get() { return m_Wrapper.m_Onboarding; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnboardingActions set) { return set.Get(); }
        public void SetCallbacks(IOnboardingActions instance)
        {
            if (m_Wrapper.m_OnboardingActionsCallbackInterface != null)
            {
                @DRight.started -= m_Wrapper.m_OnboardingActionsCallbackInterface.OnDRight;
                @DRight.performed -= m_Wrapper.m_OnboardingActionsCallbackInterface.OnDRight;
                @DRight.canceled -= m_Wrapper.m_OnboardingActionsCallbackInterface.OnDRight;
                @DLeft.started -= m_Wrapper.m_OnboardingActionsCallbackInterface.OnDLeft;
                @DLeft.performed -= m_Wrapper.m_OnboardingActionsCallbackInterface.OnDLeft;
                @DLeft.canceled -= m_Wrapper.m_OnboardingActionsCallbackInterface.OnDLeft;
            }
            m_Wrapper.m_OnboardingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DRight.started += instance.OnDRight;
                @DRight.performed += instance.OnDRight;
                @DRight.canceled += instance.OnDRight;
                @DLeft.started += instance.OnDLeft;
                @DLeft.performed += instance.OnDLeft;
                @DLeft.canceled += instance.OnDLeft;
            }
        }
    }
    public OnboardingActions @Onboarding => new OnboardingActions(this);

    // LevelSelect
    private readonly InputActionMap m_LevelSelect;
    private ILevelSelectActions m_LevelSelectActionsCallbackInterface;
    private readonly InputAction m_LevelSelect_EnableMenu;
    public struct LevelSelectActions
    {
        private @PlayerInputActions m_Wrapper;
        public LevelSelectActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @EnableMenu => m_Wrapper.m_LevelSelect_EnableMenu;
        public InputActionMap Get() { return m_Wrapper.m_LevelSelect; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelSelectActions set) { return set.Get(); }
        public void SetCallbacks(ILevelSelectActions instance)
        {
            if (m_Wrapper.m_LevelSelectActionsCallbackInterface != null)
            {
                @EnableMenu.started -= m_Wrapper.m_LevelSelectActionsCallbackInterface.OnEnableMenu;
                @EnableMenu.performed -= m_Wrapper.m_LevelSelectActionsCallbackInterface.OnEnableMenu;
                @EnableMenu.canceled -= m_Wrapper.m_LevelSelectActionsCallbackInterface.OnEnableMenu;
            }
            m_Wrapper.m_LevelSelectActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EnableMenu.started += instance.OnEnableMenu;
                @EnableMenu.performed += instance.OnEnableMenu;
                @EnableMenu.canceled += instance.OnEnableMenu;
            }
        }
    }
    public LevelSelectActions @LevelSelect => new LevelSelectActions(this);
    public interface ICameraControlsActions
    {
        void OnCameraThumbstick(InputAction.CallbackContext context);
        void OnCameraMouseInput(InputAction.CallbackContext context);
    }
    public interface IInteractActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnPast(InputAction.CallbackContext context);
        void OnPresent(InputAction.CallbackContext context);
        void OnFuture(InputAction.CallbackContext context);
    }
    public interface ICharacterMovementActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IBoxMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IMenuInterractionActions
    {
    }
    public interface IPauseActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IOnboardingActions
    {
        void OnDRight(InputAction.CallbackContext context);
        void OnDLeft(InputAction.CallbackContext context);
    }
    public interface ILevelSelectActions
    {
        void OnEnableMenu(InputAction.CallbackContext context);
    }
}
